   David Nolan, Michael Bernstein:  "A History of Programming Languages For 2 Voices"
   (Live captioning by Norma Miller @whitecoatcapxg)
   
   >> Hello, cool. 
   >>  (Stage whisper): You can talk louder.
   >> OK, so this talk is called A History of Programming Languages For Two Voices. This was actually an idea that Mike and I came up with over a year ago, we wanted to do it at the last Strangeloop, but for various reasons didn't happen until this time. But we're really excited to do this talk, we both have a very deep love of programming languages. We're musicians, but we're also sort of music connoisseurs, so to speak, so we thought it would be cool to do -- basically it's kind of like a mix tape of sort of the chronology of programming languages, along with interesting things that were happening in music around the same time. And kind of like a mix tape, we're kind of juxtaposing things. It might not even be clear exactly how these things are related, but hopefully it will create maybe interesting ideas and it will be a lot of fun. So a little bit about myself before we ... ... ... ... ... (technical difficulties for a few seconds)
   One thing this talk is not is comprehensive. Don't expect more than what you see up here. We're really excited to present to you today, and a little bit like two seconds of off script, I wanted to take an opportunity to really thank Alex Miller for putting this conference together and all the organizers and particularly for inviting last night's closing keynote to speak. The issues that were addressed in that talk are extremely personal and important to David and I, and we were seeing before yesterday, that this is our favorite conference, and having something like that here really nailed that home. So on to the talk, the talk is --
   [applause]
   Thanks, yeah.
   So we've divided the talk into a few different sections, you know, the history of music is much longer than the history of programming languages and so since this is our idiosyncratic mix tape, we decided to start in a section that we call the roots and the roots of computer science that we decided to start with were in around the mid 1930s or so and this is where we're going to begin our journey and David is going to start us off.
   So part of the reason why we were starting sort in the 1930s, is that I mean if you really look at a history of computing, I mean there's so much around mathematics and logic but it was early in the 20th Century when people started coming up with computable theory with the fact that computers could even be constructed and that software was going to happen it's very much a 20th Century phenomenon, computers, but in a similar way, something happened to music around the same time and this was the ability to record music onto some physical thing and distribute that music. Prior to the 20th Century, you really couldn't, you know, experience music without either being able to perform it yourself or being in the presence of a performer and I think it's easy to see -- music has always been an extremely important part of human life but you've seen if load in a way that I don't think anybody could have predicted thanks to recorded music.
   So the computer science stuff I mean you can pick a lot of places to start, but we're both fans of functional programming and this is such a huge paper, this is where Alonzo Church was thinking about compute ability and he sort of on the side invents this thing called the lambda calculus and that will trigger a massive development in theory but as well as something that people couldn't have imagined, you know, 30, almost 30 years after this, somebody would create a programming language which would use the lambda calculus as its indication so this is the beginning of a very big bang. We like to say the lambda calculus, you may have heard of it.
   So we picked this record it's a really cool record, this is a collection of pieces by 20th Century composers, quite a few interesting people on this one. The one we're going to play with you is Olivia Messian, and he wrote pieces for this new instrument and it had keys and it had to me, a very 20th Century sound it's electronic, something that people hadn't heard before. We're going to play you a short clip of this.
   >> (Music playing).
   >>
   >> So the reason why we close that as David said is that doesn't sound like music that would have been composed in the early 20th Century, to me, anyway. So having an individual that composes music start to look for other media through which to express their sound was a really profound and interesting thing to us and there are echoes in what David said about programming languages in this music and we're going to play one more piece from the same time period, roughly. This is music by Pierre Henry that he composed with his mentor in France and they invented a genre of ostensibly classical music so they take this idea of using pure electron media to express music by removing all instrumentation of music and composing only of tape so most people think of sampling being a late 20th Century phenomenon but in fact these gentlemen in suits and very serious faces in the 1930s and 1940s were making music that a lot of people might take issue you with calling it music and let's hear variations on a door and a sigh and the reasons why it has that title is going to become very clear.
   >> (.
   >> It's OK to laugh.
   >> (Music playing.)
   >> Comedic timing so this is a piece of music composed of the sound of a door kind of creaking and a person sighing and they took these pieces of -- they took these samples on magnetic tape and manipulated them and from that they made their composition and this leads us right into the next section that woo call reinvention and the idea for this section reinexception came from between the early 1940s, and the mid 1950s, you know, actual computers were invented so you had actual machines that could program things on. It wasn't a very pleasant experience to program them but by the time we get to this period, we see people taking the actual material of computation and thinking, hm, I wonder if there's a different way that we can do that. And we're going to start this section off with a quote from an interview of John Bacchus, the inventer of the Fortran programming Lang wand he said I really didn't ne what to do with my life. And I decided what I wanted was a good hifi set because I liked music. In those days they didn't really exist so I went to a radio school. I had a very nice teacher and he asked me to cooperate with him and compute the characteristics of some circuits for a magazine so he kind of fell backwards into computing and as you'll see he didn't find it to be a particularly pleasant experience as you'll see from this quote of the same interview.
   In 1953, frustrated by his experience of hand to hand combat with the machine, Backus was eager to somehow simplify programming. I figured there had to be a better way, he said, and we think this is still true, right? And this is one of the themes of this talk 
   >> There's always, we think, going to be a better way and so he made a better way, it was called Fortran and this is the front page of the Fortran manual designed to run on the IBM704 in '58, '59 or something like that and here you have a high level programming language designed for scientific computation that allowed people to actually use things like abstraction in order to express algorithms and programs. So this is that reinvention that we're talking about and we're going to hear about two more languages that were created around the same time that similarly harnessed this desire to program computers and not necessarily fist fight with them.
   So shortly after Fortran appeared John Mc Carthy invented lisp, that was in 1957 this is the page one of the programmer's manual dated 1960 and this talks about lisp 1 to run on the IBM74, so this was the promise of compilers, generating the assembly code for a particular hardware was actually happening, people could program in higher-level languages at a higher level of abstraction and get something done. What's fascinating about this is that you know, two compilers or in this case an interpreter with some sort of run time, still the idea was a common desire to higher program but so different. Fortran was about technical computing and lisp was created by a sort of a mathematician, a logician, and he wanted to do something different symbolic mathematics to pursue this thing that he was calling artificial intelligence.
   Shortly a bunch of smart people got together and created ALGOL60. And the shadow of ALGOL60 is vast. It's the most popular dialect that exists today.
   So when we are sitting around talking about, you know, what music should we pick that makes sense or has some sort of relationship to this period of time and we sort of settled on the sort of jazz movement in the 50s and the reason we did this was in the same way that computing had already existed for a good 30 years, the idea of computing, actual computing and programming languages, this was happening, and the compiler thing and the interpreter thing really allowed computing to be sort of free, jazz had been around for 40, 30 years already, about but in this period a bunch of talented individuals decided to distill jazz into a very pure essence and I think Mike has something to say about that.
   >> Yeah, so we're going to play you a sample from Thelonius Monk and was the progenitor of bebop and post bop and all of those kind of things. So what we want you to listen to for this music if you don't know jazz and never heard it before is just listen to the rhythm of the piano and the way the piano is. It's a tune called in walk by that Thelonious monk wrote and dedicated to his pal, bud Powell. This is one of my favorite pieces of music.
   (Music playing) so something that's yet another pianist, but very, very different is Cecil Taylor, so Mike and I both lucky enough to have seen Cecil Taylor perform in New York. Cecil Taylor was really somebody of the 60s and 70s, but he started in sort of the bebop scene in New York City. What's interesting about the way he plays it is it's very percussive. He was really a big figure in what's called the free jazz movement which was distinctly an African American sort of event that happened. What's really cool about his music, it's so much distinctly his own thing, yet it's still jazz, again you'll hear that it's very dissonant, very rhythmic, very percussive, it's almost like he's drumming the pianos ...
   (Music playing).
   >> All right. Thanks, Cecil. So the next section we call this for the people. It's a shorter section, but we wanted to bridge the gap between the late 50s and early 60s and you know, the sort of many so of the more obvious benchmarks that happened in the late 60s and early 70s, so in the mid 1960s, you see a movement where populism and popular culture really starts to like take hold in a really interesting way, especially in the United States. David is going to talk about basic.
   >> So a lot of things happened in the 60s, we're only going to focus on this one because I think it drives just an important point home, which was an attempt to expand the number of people that could get access to the power of computing. We found this, this is a basic user manual from October, 1964 and the introductory paragraphs is really incredible. While Fortran might be great if you're a scientist and lisp might be great if you're a logician, there are lots of tasks that don't require that level of sophistication and the beginning of this manual basically says almost anybody can pick this up. You know, you can look at this manual, spend about a week and you'll really be able to get it and the truth is I know there's probably a lot of you in the audience that probably learned basic when you were children. Right? Basic is simple enough for a child to pick up and I think to this day people are constantly looking at ways to widen the scope of people who have access to the power of computation. So this is why I sort of thought BASIC is the language of the people and Mike is going to talk about the music selection.
   >> Yeah, so there's aa lot of amazing music from this period of time but one thing that we couldn't ignore is Motown. So in the mid 1960, you have a movement that was started in Detroit based around a record label and this is one of those record labels that has a under so, right? These producers and musicians and song writers collaborated to make something new, right? To make a from the ground up new sound that ended up being one of the most important and enduring popular music movements ever, right? I think everyone loves Motown music and one of my favorite Motown tracks is Martha and the Vandellas Heat Wave, and it's OK to dance to this.
   (Music).
   >> All right. All right. So the next section is called feed your head. We're moving into you know, the psychedelic 60s, there was a lot of civil unrest all around the world, people were questioning, you know, the way that society was organized. Really sort of shaking things up. You see a similar thing happening in computer science. People had lived now with programming language for quite a bit of time, and people were starting to really to go back and revisit some of these assumptions and early designs. There's a very famous paper by Landon called the next 700 programming languages and it's really sort of looking at, you know, while we understand that high-level programming is very effective, it became clear that even when you have a high-level programming language, there can be flaws in the disease, there can be flaws in the semantics. He wrote in this paper about I swim so you get a sense that people are looking for something new. A lot of people started look working on doing new things, alen Kay at xerox park started small talk. Small talk was a language that was designed to be oriented around many things that people never experienced before, number one, the idea of a personal computer, the fact that on a personal computer I could be networked and I could communicate with another human being, that graphics would be a fundamental primitive in the computing interaction, and you know, really wild ideas here are around whether sort of an iconic principle in the language might have some power. Really cool stuff. And then you also had things like. K and his group were writing something called prologue. Instructing the computer step by step what needed to be done. But prologue had this totally radical idea where you make a series of declarative statements and then a search algorithm will be applied to find the solution. Prologue has a beautiful quality if your program is pure, it's actually possible to run your program in both directions and to do things like inference. Really crazy stuff I think even to this day we still haven't come to the full psychedelic potential.
   So these are the drawings describing how prologue works and I like them because they look like art and they're pretty crazy. Something to kick off is a band I bet everybody has heard of. Pink Floyd.
    Lucifer Sam off their first record ... ...
   (Music).
   >> All right. That's Sid in middle there.
   >> So why one thing that we wanted to make sure that we got across in this talk is that there's something really obvious and limiting in a way about the history of programming languages and programming language theory which is that they all kind of came from people with very similar backgrounds in very similar situations, trying to solve very similar problems. And a cool thing about music as David noted earlier in the talk is that it's universal, right and a cool thing about the 1960s is that this cultural change, this sea change that was happening, was not only happening in the United States. It was happening all over the world and there were amazing cultural, sociopolitical movements that were consuming counsel countries in Europe and South America and Africa and everywhere and one of my favorite instances of that was in Brazil there was a sociopolitical artistic movement Tropicalia. And this uses the same substance it's made up of the same stuff that Pink Floyd is, right? This is essentially the same instrumentation, although it's sung in a different language, to express a very different purpose toward a very different end and we just think that that's beautiful and so we wanted to share this with you to remind you that there's a lot to be gained when you seek perspectives out side of the narrow scope of what you're typically exposed to. So here's the mutantes.
   >> (Music).
   >> We've listened to these samples so many times.
   [laughter]
   >> This next one is I think when Mike again when we got together to plan this talk, you know, we have -- we share a lot of similar tastes, we also have different tastes but one thing we agreed upon was this record. 1969 if you're a record collector is one of the most amazing years ever in the history of recorded music. About you this is a record I'm sure that you've probably never heard of. This is Sonny Sharrock, he's often characterized as a jazz musician though I think the type of music he did was far more powerful than that. We're going to play you a track called a portrait of Linda in three colors, all black. Do you have anything else to say about this track.
   >> I can't believe we're showing this to this audience. So excited. Not much else to say, just enjoy.
   >> (Music.)
   >>
   >> So nothing happened in the 70, we're not going to talk about the 70s, next!
   [laughter]
   >> So we're skipping to the 80s. Because we can. It's our mix tape. Make your own.
   >> You like the 70s. It's cool. Make your own.
   >> So the 80, I think are sort of remembered for rampant commercialism. I think Mike and I we both love pop music, I mean Michael Jackson, Madonna, Cyndi Lauper, that stuff was great. But what started happening was a beginning of underground music, in the same way that computing was becoming cheap the materials required for making music was also becoming cheap and artists were taking things in their own hands. What was once underground often becomes mainstream and has a far bigger influence than anybody can imagine and I think these programming languages really fit this idea. So the first of those we're going to talk about is a language called Miranda developed by David Turner and it's called Miranda, a none strict functional language with polymorphic types and some of us write languages that still don't have access to these features, right? So. What's cool about Miranda is that it's lazy it's a pure functional programming language and it was the predecessor to Haskell. Programming language that we both love, and it is just incredible to see at this time the sort of nascent form of these ideas that a programmer interacting with a computer could get a lot of assistance from the computer in writing programs and could lean on a type system and think about things like referential transparency and its impact on your ability to express programs so we really wanted to choose this because it's a language that not a lot of people know about and and one that you should check out. Joe Armstrong was kind enough to tweet this the other day this is the first page of the script for Erlang the movie. So yeah, whaddup, Joe? So Erlang is another really interesting programming language that still struggles with its undergroundness in a way, but the reason why I wanted to bring it up here was because I think what's so amazing about it is that it's designed for a very specific purpose, right? It was a language that was designed for a particular domain and it did it really well, or actually it does it really well, right? Still doing it? Ericsson where this language is invented still employs this language to run its telecommunications systems with 99..n9s. It's this really interesting thing to desire to to solve a very specific problem a very specific and very successful solution was created. So there are still some sort of specific-purpose programming languages today like this, this to me is one that really stands out and Erlang is a really cool programming language that we're also fans of.
   So for this section we picked some things that you're unlikely to have heard anything except maybe the last one. The first one is James Blood Ulmer, his guitar style is that he only plays with his thumb. You can find this in the dollar bin.
   >> Do they have dollar bins anymore, is that a thing? Does iTunes have a dollar bin?
   >> You can probably get this for 3 bucks in iTunes. It's a weird record.Ites funk, it's soul, R and B, punk, it's all mixed in this crazy thing. Very short clip.
   (Music).
   And the next thing Mike's going to talk about.
   >> Yeah, so toward the end of bands that were influential but that a lot of people may have never heard of is a band called suicide. This is a band that was around in the early 80s in New York. One of those records that you definitely didn't want your parents to find in your bedroom when you were a teenager because then they're going to ask you a lot of questions about the name of the band and the violent cover, but this is a really cool record, because it's two people, Alan Dega and Martin Rev and they're trying to make a new sound. There's a lot of interesting stuff happening, the end of disco, around the time of like post-punk movement, punk had been in full swing, new wave hadn't really happened yet, synchronizers weren't uncool yet and they did this thing that they wanted to play music that represented their time and place and were known for these kind of very ha depressive live performances, this is a track off their first album and it's called ghost rider.
   (Music).
   >> And the last thing is going to be a very early hip-hop, so hip-hop was this thing at one point, you know hip-hop wasn't a thing that people knew about, it was something that happened at parties and basements, it wasn't yet a worldwide phenomenon, so we thought we couldn't do music justice if we didn't pick this, what I like about hip-hop, though, is specifically you'd reached a point in recorded music where there was so much prior stuff to sample that you could make music purely out of samples. This piece actually has a really great reference in it which is they take the keyboard line from a craft works song, craft work is kind of amazing early electronic band. This piece is awesome.
   (Music).
   >> Keep that cover, though.
   >> So same with the 70s. Nothing happened in the 90s. Actually some things happened in the 90s, Java happened in the 90s, JavaScript happened in the 90s, and we think there's a really good tune for the fact that these things happened.
   >>
   >> I didn't see anyone dancing.
   >>
   [laughter]
   [applause]
   >> So that was a piece by a Japanese noise musician named Mirzbao, this music was created in his bedroom, right and the cool thing about this is that the thing about, the thing about hip-hop was that so much music had happened up until that point so they decided to kind of utilize that in an interesting way by sampling it and reference iting. On the other side of the coin you had people that understood the fact that so much music that happened up until that point that they wanted to destroy the actual notion of music. Question what is music and what is organized sound and all of these kinds of things.  So similarly around the same time, you have people making programming languages in a different context from the way that they were normally made. So here's a mailing list post from December, 1995, by Yukohiro Matsumoto and he's talking about a language that he's talking about called Ruby and it's meant to replace set and and this is a mailing list pose on the internet, right? And all of the other languages that we showed you were like academic papers. Right? so we thought that that was really cool and there are a lot of other 0 examples of this. We noticed that when David and I -- we collected way more material for this talk than is actually in the talk and Bip the time we got to 90s, all of these languages were announced on e-mail posts. So we thought that was a really interesting thing to point out. Sort of toward the end of, you know, this is the natural consequence of an underground movement happening is that proliferation of material and things being easier to use and people having access to more people means more, better things are produced because more diverse perspectives are included so that was something that we thought that was really important to point out.
   >> So what that's the end of our mix tape, but we wanted to make sure that we didn't end the talk without trying to tie it all together a little bit. So I have my own ideas about so what, about you what about you, David? So what?
   >> So for me when we were at the end of coming up with what this talk was going to be when we sort of saw all the slides and had all the music, a theme that came up every time we talked about the material was that as sort of fans of music, you know, we both kind of agreed that if people just stopped making music, if all composers stopped making music, you could never go through all the awesome stuff that's been done in the 21st century, it's not possible. At the same time we felt the exact opposite way with computer programming and programming languages it's like no, we can't stop now. It's not time to stop. There's just so much more work to do. And a lot of this is I think in some sense while recorded music changed the way we feel about music, music is really old, thousands upon thousands of years old, we don't even know how old it is. So that's my take. In.
   >> And I think to add a little bit to what David said, the so what like if you think about the infinite amount of amazing music that has been created about I humans all over the world throughout history and the unbelievably rich tapestry that that creates, that's what we should be striving for when we're creating programming languages, we should have programming languages that represent every diverse perspective that come from every place, that are born of any kind of environment, and when we are able to proliferate these ideas, when we're capable of communicating to people about, ooh, what's a programming language all about, why would I want to make a new one, what does that even mean? How would I do it? The more people that know that, the better programming will be, so we think that there is a lesson to be learned for all of us in this, in that respect. So that's it. Thanks.
   [applause]
   
